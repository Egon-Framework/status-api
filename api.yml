openapi: 3.0.3
info:
  title: Egon Status API
  description: |-
    API specification for monitoring the Egon Framework.
    
    For more information, checkout the source code [on GitHub](https://github.com/Egon-Framework/status-api)
  version: 0.0.1
tags:
  - name: Documentation
    description: Endpoints that direct users to the documentation or other helpful information
  - name: System Status
    description: Retrieve information concerning the Egon API backend
  - name: Pipeline Metadata
    description: Metadata and status information for currently running pipeline components
paths:
  /:
    get:
      tags:
        - Documentation
      summary: Base API URL
      description: The base API URL pointing users at the documentation
      operationId: root
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 'The Egon Framework status API. See https://egon-framework.github.io/status-api/ for more details.'
  /health:
    get:
      tags:
        - System Status
      summary: API health check
      description: Check the status of the API
      operationId: healthCheck
      responses:
        '200':
          description: OK
  /version:
    get:
      tags:
        - System Status
      summary: Fetch the API version
      description: Return the version number for the current API
      operationId: version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
              examples:
                version 0.1:
                  $ref: '#/components/examples/Version'
  /pipeline/{pipelineId}:
    get:
      tags:
        - Pipeline Metadata
      security:
        - TokenAuth: [ ]
      summary: Get pipeline metadata
      description: Get metadata for a currently running pipeline by its ID
      operationId: getPipelineById
      parameters:
        - name: pipelineId
          in: path
          description: Pipeline ID to return data for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
              examples:
                etl:
                  $ref: '#/components/examples/ETLPipeline'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/MissingResourceError'
  /node/{nodeID}:
    get:
      tags:
        - Pipeline Metadata
      security:
        - TokenAuth: [ ]
      summary: Get node metadata
      description: Get metadata for a single pipeline node by its ID
      operationId: getNodeById
      parameters:
        - name: nodeID
          in: path
          description: Node ID to return data for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
              examples:
                extract:
                  $ref: '#/components/examples/ExtractNode'
                transform:
                  $ref: '#/components/examples/TransformNode'
                load:
                  $ref: '#/components/examples/LoadNode'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/MissingResourceError'
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    MissingResourceError:
      description: A running resource was not found with the given ID
  examples:
    Version:
      description: Version 0.1
      value:
        version: "0.1"
    ETLPipeline:
      summary: A generic ETL Pipeline
      value:
        id: "0x7f50239539d0"
        name: ETL Pipeline
        description: An ETL pipeline with three nodes
        launched: 2020-07-21T17:32:28Z
        status: running
        nodes: [
          {
            node: "0x7f5023953990",
            downstream: [ "0x7f50239539b0" ]
          },{
            node: "0x7f50239539b0",
            downstream: [ "0x7f502385e910" ]
          },{
            node: "0x7f502385e910",
            downstream: [ ]
          },
        ]
    ExtractNode:
      summary: Extract node for an ETL pipeline
      value:
        id: "0x7f5023953990"
        name: Extract
        description: Load data into the pipeline
        instances: 1
        status: stopped
    TransformNode:
      summary: Transform node in an ETL pipeline
      value:
        id: "0x7f50239539b0"
        name: Transform
        description: Transform and analyze pipeline data
        instances: 4
        status: running
    LoadNode:
      summary: The load step in an ETL pipeline
      value:
        id: "0x7f502385e910"
        name: Load
        instances: 2
        status: running
  schemas:
    # The API version number
    Version:
      required:
        - version
      properties:
        version:
          type: string
          pattern: ^\d*\.\d*$
      example:
        $ref: '#/components/examples/Version/value'
    # Meta data for a given node
    Node:
      required:
        - id
        - name
        - instances
        - status
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        instances:
          type: integer
        status:
          type: string
          enum: [ 'launching', 'running', 'stopped', 'errored', 'unknown' ]
      example:
        $ref: '#/components/examples/ExtractNode/value'
    # Meta data for a given pipeline
    Pipeline:
      required:
        - id
        - name
        - description
        - launched
        - status
        - nodes
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        launched:
          type: string
          format: date-time
          pattern: ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$
        status:
          type: string
          enum: [ 'launching', 'running', 'stopped', 'degraded', 'errored', 'unknown' ]
        nodes: # Mapping of pipeline node IDs to downstream node IDs
          type: array
          items:
            type: object
            required:
              - node
              - downstream
            properties:
              node:
                type: string
              downstream:
                type: array
                items:
                  type: string
                uniqueItems: true
      example:
        $ref: '#/components/examples/ETLPipeline/value'
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: query
      name: token
